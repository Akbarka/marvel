{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"names":["RandomChar","useState","char","setChar","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","interval","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","className","setContent","View","onClick","src","mjolnir","alt","data","name","description","thumbnail","homePage","wiki","imgStyle","objectFit","style","href","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEned","setShowList","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","itemsRef","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","ErrorMessage","Error","arr","items","map","i","CSSTransition","timeout","classNames","ref","el","tabIndex","e","onCharSelected","onKeyPress","key","TransitionGroup","component","renderItems","disabled","display","CharInfo","charId","comics","length","index","CharSearchForm","getCharacterByName","errorMessage","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","ErrorBoundary","state","error","errorInfo","console","log","this","setState","children","MainPage","selectedChar","setSelectedChar","Helmet","content","decoration","width","height","margin","img","paddingBottom","fontSize","fontWeight","request","useCallback","url","a","method","body","headers","fetch","response","ok","status","json","useHttp","_apiBase","_apiKey","res","_transformCharacter","getAllComics","_transformComics","getComics","slice","path","extension","urls","title","language","textObjects","price","prices","comicsDetail","pageCount","Skeleton"],"mappings":"2OAAe,MAA0B,oC,gBCOnCA,EAAa,WACjB,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEA,EAA0DC,cAAlDC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,WAAYC,EAAlC,EAAkCA,QAASC,EAA3C,EAA2CA,WAE3CC,qBAAU,WACRC,IACA,IAAMC,EAAWC,YAAYF,EAAY,KAEzC,OAAO,WACLG,cAAcF,MAEf,IAEH,IAAMG,EAAe,SAACZ,GACpBC,EAAQD,IAGJQ,EAAa,WACjBJ,IACA,IAAMS,EAAKC,KAAKC,MAAM,IAAAD,KAAKE,SAAiC,QAC5Db,EAAaU,GACVI,KAAKL,GACLK,MAAK,kBAAMX,EAAW,iBAG3B,OACE,sBAAKY,UAAU,aAAf,UACGC,YAAWd,EAASe,EAAMpB,GAC3B,sBAAKkB,UAAU,qBAAf,UACE,oBAAGA,UAAU,oBAAb,wCAEE,uBAFF,4CAKA,mBAAGA,UAAU,oBAAb,mCACA,wBAAQG,QAASb,EAAYU,UAAU,sBAAvC,SACE,qBAAKA,UAAU,QAAf,sBAEF,qBAAKI,IAAKC,EAASC,IAAI,UAAUN,UAAU,kCAM7CE,EAAO,SAAC,GAAc,IAAZK,EAAW,EAAXA,KACNC,EAAiDD,EAAjDC,KAAMC,EAA2CF,EAA3CE,YAAaC,EAA8BH,EAA9BG,UAAWC,EAAmBJ,EAAnBI,SAAUC,EAASL,EAATK,KAC5CC,EAAW,CAAEC,UAAW,SAS5B,MANE,wEADAJ,IAGAG,EAAW,CACTC,UAAW,YAIb,sBAAKd,UAAU,oBAAf,UACE,qBACEI,IAAKM,EACLJ,IAAI,mBACJN,UAAU,kBACVe,MAAOF,IAET,sBAAKb,UAAU,mBAAf,UACE,mBAAGA,UAAU,mBAAb,SAAiCQ,IACjC,mBAAGR,UAAU,oBAAb,SAAkCS,IAClC,sBAAKT,UAAU,mBAAf,UACE,mBAAGgB,KAAML,EAAUX,UAAU,sBAA7B,SACE,qBAAKA,UAAU,QAAf,wBAEF,mBAAGgB,KAAMJ,EAAMZ,UAAU,2BAAzB,SACE,qBAAKA,UAAU,QAAf,8B,yCCtDNiB,G,OAAW,SAACC,GAChB,MAAgCrC,mBAAS,IAAzC,mBAAOsC,EAAP,KAAiBC,EAAjB,KACA,EAA4CvC,oBAAS,GAArD,mBAAOwC,EAAP,KAAuBC,EAAvB,KACA,EAA4BzC,mBAAS,KAArC,mBAAO0C,EAAP,KAAeC,EAAf,KACA,EAAiC3C,oBAAS,GAA1C,mBAAO4C,EAAP,KAAkBC,EAAlB,KACA,EAAgC7C,oBAAS,GAAzC,mBAAiB8C,GAAjB,WAEA,EAAkD3C,cAA1C4C,EAAR,EAAQA,iBAAkBzC,EAA1B,EAA0BA,QAASC,EAAnC,EAAmCA,WAEnCC,qBAAU,WACRwC,EAAUN,GAAQ,KACjB,IAEH,IAAMM,EAAY,SAACN,EAAQO,GACzBH,GAAY,GACFL,GAAVQ,GACAF,EAAiBL,GACdxB,KAAKgC,GACLhC,MAAK,kBAAMX,EAAW,iBAGrB2C,EAAmB,SAACC,GACxB,IAAIC,GAAQ,EACRD,EAAc,IAChBC,GAAQ,GAEVb,GAAY,SAACD,GAAD,4BAAkBA,GAAlB,YAA+Ba,OAC3CV,GAAkB,GAClBE,GAAU,SAACD,GAAD,OAAYA,EAAS,KAC/BG,EAAYO,IAGRC,EAAWC,iBAAO,IAElBC,EAAc,SAACzC,GACnBuC,EAASG,QAAQC,SAAQ,SAACC,GAAD,OACvBA,EAAKC,UAAUC,OAAO,0BAExBP,EAASG,QAAQ1C,GAAI6C,UAAUE,IAAI,uBACnCR,EAASG,QAAQ1C,GAAIgD,SA8CjBC,EAAWC,mBAAQ,WACvB,OArGe,SAAC1D,EAAS2D,EAAWzB,GACtC,OAAQlC,GACN,IAAK,UACH,OAAO,cAAC4D,EAAA,EAAD,IACT,IAAK,UACH,OAAO1B,EAAiB,cAACyB,EAAD,IAAgB,cAACC,EAAA,EAAD,IAC1C,IAAK,YACH,OAAO,cAACD,EAAD,IACT,IAAK,QACH,OAAO,cAACE,EAAA,EAAD,IACT,QACE,MAAM,IAAIC,MAAM,uBA0FXhD,CAAWd,GAAS,kBA5CT,SAAC+D,GACnB,IAAMC,EAAQD,EAAIE,KAAI,SAACb,EAAMc,GAC3B,IAAIxC,EAAW,CAAEC,UAAW,SAQ5B,MALE,wEADAyB,EAAK7B,YAGLG,EAAW,CAAEC,UAAW,YAIxB,cAACwC,EAAA,EAAD,CAAeC,QAAS,IAAKC,WAAW,aAAxC,SACE,qBAEEC,IAAK,SAACC,GAAD,OAASxB,EAASG,QAAQgB,GAAKK,GACpCC,SAAU,EACVhE,GAAI4C,EAAK5C,GACTQ,QAAS,SAACyD,GACR1C,EAAM2C,eAAetB,EAAK5C,IAC1ByC,EAAYiB,IAEdS,WAAY,SAACF,GACG,KAAVA,EAAEG,KAAwB,UAAVH,EAAEG,MACpB7C,EAAM2C,eAAetB,EAAK5C,IAC1ByC,EAAYiB,KAGhBrD,UAAU,aAfZ,UAiBE,qBAAKI,IAAKmC,EAAK7B,UAAWJ,IAAKiC,EAAK/B,KAAMO,MAAOF,IACjD,qBAAKb,UAAU,aAAf,SAA6BuC,EAAK/B,SAjB7B+B,EAAK5C,KAF4C0D,MAyB9D,OACE,oBAAIrD,UAAU,aAAd,SACE,cAACgE,EAAA,EAAD,CAAiBC,UAAW,KAA5B,SAAmCd,MAMNe,CAAY/C,KAAWE,KACvD,CAAClC,IAEJ,OACE,sBAAKa,UAAU,aAAf,UACG4C,EACD,wBACEuB,SAAU9C,EACVN,MAAO,CAAEqD,QAAS3C,EAAY,OAAS,SACvCtB,QAAS,kBAAM0B,EAAUN,IACzBvB,UAAU,mCAJZ,SAME,qBAAKA,UAAU,QAAf,8BCpHFqE,G,OAAW,SAACnD,GAChB,MAAwBrC,mBAAS,MAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEA,EACEC,cADMC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,WAAYC,EAAlC,EAAkCA,QAASC,EAA3C,EAA2CA,WAG3CC,qBAAU,WACRC,MACC,IAEHD,qBAAU,WACRC,MACC,CAAC4B,EAAMoD,SAEV,IAAMhF,EAAa,WACjBJ,IACA,IAAQoF,EAAWpD,EAAXoD,OACHA,GAILrF,EAAaqF,GACVvE,KAAKL,GACLK,MAAK,WACJX,EAAW,iBAIXM,EAAe,SAACZ,GACpBC,EAAQD,IAGV,OACE,qBAAKkB,UAAU,aAAf,SACGC,YAAWd,EAASe,EAAMpB,OAK3BoB,EAAO,SAAC,GAAc,IAAZK,EAAW,EAAXA,KACNC,EAAyDD,EAAzDC,KAAMC,EAAmDF,EAAnDE,YAAaC,EAAsCH,EAAtCG,UAAWC,EAA2BJ,EAA3BI,SAAUC,EAAiBL,EAAjBK,KAAM2D,EAAWhE,EAAXgE,OAElD1D,EAAW,CAAEC,UAAW,SAU5B,MAPE,wEADAJ,IAGAG,EAAW,CACTC,UAAW,YAKb,qCACE,sBAAKd,UAAU,eAAf,UACE,qBAAKe,MAAOF,EAAUT,IAAKM,EAAWJ,IAAKE,IAC3C,gCACE,qBAAKR,UAAU,kBAAf,SAAkCQ,IAClC,sBAAKR,UAAU,aAAf,UACE,mBAAGgB,KAAML,EAAUX,UAAU,sBAA7B,SACE,qBAAKA,UAAU,QAAf,wBAEF,mBAAGgB,KAAMJ,EAAMZ,UAAU,2BAAzB,SACE,qBAAKA,UAAU,QAAf,6BAKR,qBAAKA,UAAU,cAAf,SAA8BS,IAC9B,qBAAKT,UAAU,eAAf,qBACA,qBAAIA,UAAU,oBAAd,UACGuE,EAAOC,OAAS,EAAI,KAAO,yCAC3BD,EAAOnB,KAAI,SAACb,EAAMkC,GACjB,KAAIA,EAAQ,GACZ,OACE,oBAAgBzE,UAAU,oBAA1B,SACGuC,EAAK/B,MADCiE,a,yBCnEfC,G,OAAiB,WACrB,MAAwB7F,mBAAS,MAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EACEC,cADM2F,EAAR,EAAQA,mBAAoBzF,EAA5B,EAA4BA,WAAYC,EAAxC,EAAwCA,QAASC,EAAjD,EAAiDA,WAG3CM,EAAe,SAACZ,GACpBC,EAAQD,IAWJ8F,EACQ,UAAZzF,EACE,qBAAKa,UAAU,8BAAf,SACE,cAACgD,EAAA,EAAD,MAEA,KAEA6B,EAAW/F,EAAcA,EAAK0F,OAAS,EAC3C,sBAAKxE,UAAU,uBAAf,UACE,sBAAKA,UAAU,uBAAf,6BACmBlB,EAAK,GAAG0B,KAD3B,YAGA,cAAC,IAAD,CACEsE,GAAE,sBAAiBhG,EAAK,GAAGa,IAC3BK,UAAU,2BAFZ,SAIE,qBAAKA,UAAU,QAAf,0BAIJ,qBAAKA,UAAU,qBAAf,uEAbsB,KAkBxB,OACE,sBAAKA,UAAU,oBAAf,UACE,cAAC,IAAD,CACE+E,cAAe,CAAEC,SAAU,IAC3BC,iBAAkBC,IAAW,CAC3BF,SAAUE,MAAaC,SAAS,4BAElCC,SAAU,YAAmB,IAxCf5E,EAwCDwE,EAAe,EAAfA,SAxCCxE,EAyCDwE,EAxCjB9F,IAEAyF,EAAmBnE,GAChBT,KAAKL,GACLK,MAAK,kBAAMX,EAAW,iBA8BvB,SASE,eAAC,IAAD,WACE,uBAAOY,UAAU,qBAAqBqF,QAAQ,WAA9C,0CAGA,sBAAKrF,UAAU,uBAAf,UACE,cAAC,IAAD,CACEL,GAAG,WACHa,KAAK,WACL8E,KAAK,OACLC,YAAY,eAEd,wBACED,KAAK,SACLtF,UAAU,sBACVmE,SAAsB,YAAZhF,EAHZ,SAKE,qBAAKa,UAAU,QAAf,uBAGJ,cAAC,IAAD,CACEiE,UAAU,MACVjE,UAAU,qBACVQ,KAAK,kBAIVqE,EACAD,O,gCC5FDY,E,4MACJC,MAAQ,CACNC,OAAO,G,uDAGT,SAAkBA,EAAOC,GACvBC,QAAQC,IAAIH,EAAOC,GACnBG,KAAKC,SAAS,CACZL,OAAO,M,oBAIX,WACE,OAAII,KAAKL,MAAMC,MACN,cAAC1C,EAAA,EAAD,IAGF8C,KAAK5E,MAAM8E,a,GAjBMlD,aCHb,MAA0B,mCC4C1BmD,UAlCE,WACf,MAAwCpH,mBAAS,MAAjD,mBAAOqH,EAAP,KAAqBC,EAArB,KAMA,OACE,qCACE,eAACC,EAAA,EAAD,WACE,sBAAM5F,KAAK,cAAc6F,QAAQ,8BACjC,0DAEF,cAAC,EAAD,UACE,cAAC,EAAD,MAEF,sBAAKrG,UAAU,gBAAf,UACE,cAAC,EAAD,UACE,cAAC,EAAD,CAAU6D,eAfK,SAAClE,GACtBwG,EAAgBxG,QAgBZ,gCACE,cAAC,EAAD,UACE,cAAC,EAAD,CAAU2E,OAAQ4B,MAEpB,cAAC,EAAD,UACE,cAAC,EAAD,YAIN,qBAAKlG,UAAU,gBAAgBI,IAAKkG,EAAYhG,IAAI,gB,kECvC3C,UAA0B,kC,OCEnC0C,EAAe,WACnB,OACE,gCACE,qBACEjC,MAAO,CACLqD,QAAS,QACTmC,MAAO,QACPC,OAAQ,QACR1F,UAAW,UACX2F,OAAQ,UAEVrG,IAAKsG,EACLpG,IAAI,mBAEN,mBACES,MAAO,CACLqD,QAAS,QACTqC,OAAQ,SACRE,cAAe,OACfC,SAAU,OACVC,WAAY,QANhB,0B,6GCdA7H,EAAmB,WACvB,MCDc,WACd,MAA8BH,mBAAS,WAAvC,mBAAOM,EAAP,KAAgBC,EAAhB,KAEM0H,EAAUC,sBAAW,uCACzB,WACEC,GADF,mCAAAC,EAAA,6DAEEC,EAFF,+BAEW,MACTC,EAHF,+BAGS,KACPC,EAJF,+BAIY,CAAE,eAAgB,oBAE5BhI,EAAW,WANb,kBAS2BiI,MAAML,EAAK,CAAEE,SAAQC,OAAMC,YATtD,WASUE,EATV,QAWkBC,GAXlB,uBAYY,IAAItE,MAAJ,yBAA4B+D,EAA5B,qBAA4CM,EAASE,SAZjE,eAeUjH,EAAO+G,EAASG,OAf1B,kBAiBWlH,GAjBX,wCAmBInB,EAAW,SAnBf,+DADyB,sDAwBzB,IAOF,MAAO,CAAE0H,UAAS5H,WAJC6H,uBAAY,WAC7B3H,EAAW,aACV,IAE2BD,UAASC,cDjCcsI,GAA7CZ,EAAR,EAAQA,QAAS5H,EAAjB,EAAiBA,WAAYC,EAA7B,EAA6BA,QAASC,EAAtC,EAAsCA,WAEhCuI,EAAW,4CACXC,EAAU,0CAGVhG,EAAgB,uCAAG,0CAAAqF,EAAA,6DAAO1F,EAAP,+BAFL,IAEK,SACLuF,EAAQ,GAAD,OACpBa,EADoB,qCACiBpG,EADjB,YAC2BqG,IAF7B,cACjBC,EADiB,yBAIhBA,EAAItH,KAAKsE,QAAQzB,IAAI0E,IAJL,2CAAH,qDAOhB7I,EAAY,uCAAG,WAAOU,GAAP,eAAAsH,EAAA,sEACDH,EAAQ,GAAD,OAAIa,EAAJ,sBAA0BhI,EAA1B,YAAgCiI,IADtC,cACbC,EADa,yBAEZC,EAAoBD,EAAItH,KAAKsE,QAAQ,KAFzB,2CAAH,sDAKZF,EAAkB,uCAAG,WAAOnE,GAAP,eAAAyG,EAAA,sEACPH,EAAQ,GAAD,OAAIa,EAAJ,2BAA+BnH,EAA/B,YAAuCoH,IADvC,cACnBC,EADmB,yBAElBA,EAAItH,KAAKsE,QAAQzB,IAAI0E,IAFH,2CAAH,sDAKlBC,EAAY,uCAAG,0CAAAd,EAAA,6DAAO1F,EAAP,+BAAgB,EAAhB,SACDuF,EAAQ,GAAD,OACpBa,EADoB,iCACapG,EADb,YACuBqG,IAF7B,cACbC,EADa,yBAIZA,EAAItH,KAAKsE,QAAQzB,IAAI4E,IAJT,2CAAH,qDAOZC,EAAS,uCAAG,WAAOtI,GAAP,eAAAsH,EAAA,sEACEH,EAAQ,GAAD,OAAIa,EAAJ,kBAAsBhI,EAAtB,YAA4BiI,IADrC,cACVC,EADU,yBAGTG,EAAiBH,EAAItH,KAAKsE,QAAQ,KAHzB,2CAAH,sDAMTiD,EAAsB,SAAChJ,GAC3B,MAAO,CACLa,GAAIb,EAAKa,GACTa,KAAM1B,EAAK0B,KACXC,YAAa3B,EAAK2B,YAAL,UACN3B,EAAK2B,YAAYyH,MAAM,EAAG,KADpB,iEAGbxH,UAAW5B,EAAK4B,UAAUyH,KAAO,IAAMrJ,EAAK4B,UAAU0H,UACtDzH,SAAU7B,EAAKuJ,KAAK,GAAGrB,IACvBpG,KAAM9B,EAAKuJ,KAAK,GAAGrB,IACnBzC,OAAQzF,EAAKyF,OAAOpB,QAIlB6E,EAAmB,SAACzD,GACxB,MAAO,CACL5E,GAAI4E,EAAO5E,GACX2I,MAAO/D,EAAO+D,MACd7H,YAAa8D,EAAO9D,aAAe,0BACnC8H,SAAUhE,EAAOiE,YAAYD,UAAY,QACzCE,MAC6B,IAA3BlE,EAAOmE,OAAO,GAAGD,MACb,gBADJ,UAEOlE,EAAOmE,OAAO,GAAGD,MAFxB,KAGF/H,UAAW6D,EAAO7D,UAAUyH,KAAO,IAAM5D,EAAO7D,UAAU0H,UAC1DO,aAAcpE,EAAO8D,KAAK,GAAGrB,IAC7B4B,UAAWrE,EAAOqE,UAAP,UACJrE,EAAOqE,UADH,UAEP,6CAIR,MAAO,CACLzJ,UACAD,aACA0C,mBACA+C,qBACA1F,eACA8I,eACAE,YACA7I,gB,4FE7EEyJ,EAAW,WACf,OACE,qCACE,mBAAG7I,UAAU,eAAb,0DAGA,sBAAKA,UAAU,WAAf,UACE,sBAAKA,UAAU,yBAAf,UACE,qBAAKA,UAAU,2BACf,qBAAKA,UAAU,4BAEjB,qBAAKA,UAAU,0BACf,qBAAKA,UAAU,0BACf,qBAAKA,UAAU,iC,QCXjBC,EAAa,SAACd,EAAS2D,EAAWvC,GACtC,OAAQpB,GACN,IAAK,UACH,OAAO,cAAC,EAAD,IACT,IAAK,UACH,OAAO,cAAC4D,EAAA,EAAD,IACT,IAAK,YACH,OAAO,cAACD,EAAD,CAAWvC,KAAMA,IAC1B,IAAK,QACH,OAAO,cAACyC,EAAA,EAAD,IACT,QACE,MAAM,IAAIC,MAAM,yB","file":"static/js/6.f3cac6c4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import React, { useState, useEffect } from \"react\";\nimport { useMarvelService } from \"../../services/MarvelService\";\nimport { setContent } from \"../../utils/setContent\";\n\nimport mjolnir from \"../../resources/img/mjolnir.png\";\nimport \"./randomChar.scss\";\n\nconst RandomChar = () => {\n  const [char, setChar] = useState({});\n\n  const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n    const interval = setInterval(updateChar, 6000000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const updateChar = () => {\n    clearError();\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n    getCharacter(id)\n      .then(onCharLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  return (\n    <div className=\"randomchar\">\n      {setContent(process, View, char)}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">Or choose another one</p>\n        <button onClick={updateChar} className=\"button button__main\">\n          <div className=\"inner\">try it</div>\n        </button>\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n      </div>\n    </div>\n  );\n};\n\nconst View = ({ data }) => {\n  const { name, description, thumbnail, homePage, wiki } = data;\n  let imgStyle = { objectFit: \"cover\" };\n  if (\n    thumbnail ===\n    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n  ) {\n    imgStyle = {\n      objectFit: \"contain\",\n    };\n  }\n  return (\n    <div className=\"randomchar__block\">\n      <img\n        src={thumbnail}\n        alt=\"Random character\"\n        className=\"randomchar__img\"\n        style={imgStyle}\n      />\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">{description}</p>\n        <div className=\"randomchar__btns\">\n          <a href={homePage} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { RandomChar };\n","import React, { useMemo } from \"react\";\nimport { useState, useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { useMarvelService } from \"../../services/MarvelService\";\nimport { Spinner } from \"../spinner/Spinner\";\nimport { ErrorMessage } from \"../errorMessage/ErrorMessage\";\n\nimport \"./charList.scss\";\n\nconst setContent = (process, Component, newItemLoading) => {\n  switch (process) {\n    case \"waiting\":\n      return <Spinner />;\n    case \"loading\":\n      return newItemLoading ? <Component /> : <Spinner />;\n    case \"confirmed\":\n      return <Component />;\n    case \"error\":\n      return <ErrorMessage />;\n    default:\n      throw new Error(\"Unexpected process\");\n  }\n};\n\nconst CharList = (props) => {\n  const [charList, setCharList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(190);\n  const [charEnded, setCharEned] = useState(false);\n  const [showList, setShowList] = useState(false);\n\n  const { getAllCharacters, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    setShowList(true);\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllCharacters(offset)\n      .then(onCharListLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  const onCharListLoaded = (newCharList) => {\n    let ended = false;\n    if (newCharList < 9) {\n      ended = true;\n    }\n    setCharList((charList) => [...charList, ...newCharList]);\n    setNewItemLoading(false);\n    setOffset((offset) => offset + 9);\n    setCharEned(ended);\n  };\n\n  const itemsRef = useRef([]);\n\n  const focusOnItem = (id) => {\n    itemsRef.current.forEach((item) =>\n      item.classList.remove(\"char__item_selected\")\n    );\n    itemsRef.current[id].classList.add(\"char__item_selected\");\n    itemsRef.current[id].focus();\n  };\n\n  const renderItems = (arr) => {\n    const items = arr.map((item, i) => {\n      let imgStyle = { objectFit: \"cover\" };\n      if (\n        item.thumbnail ===\n        \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n      ) {\n        imgStyle = { objectFit: \"contain\" };\n      }\n\n      return (\n        <CSSTransition timeout={500} classNames=\"char__item\" key={i}>\n          <li\n            key={item.id}\n            ref={(el) => (itemsRef.current[i] = el)}\n            tabIndex={0}\n            id={item.id}\n            onClick={(e) => {\n              props.onCharSelected(item.id);\n              focusOnItem(i);\n            }}\n            onKeyPress={(e) => {\n              if (e.key === \"\" || e.key === \"Enter\") {\n                props.onCharSelected(item.id);\n                focusOnItem(i);\n              }\n            }}\n            className=\"char__item\"\n          >\n            <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n            <div className=\"char__name\">{item.name}</div>\n          </li>\n        </CSSTransition>\n      );\n    });\n\n    return (\n      <ul className=\"char__grid\">\n        <TransitionGroup component={null}>{items}</TransitionGroup>\n      </ul>\n    );\n  };\n\n  const elements = useMemo(() => {\n    return setContent(process, () => renderItems(charList), newItemLoading);\n  }, [process]);\n\n  return (\n    <div className=\"char__list\">\n      {elements}\n      <button\n        disabled={newItemLoading}\n        style={{ display: charEnded ? \"none\" : \"block\" }}\n        onClick={() => onRequest(offset)}\n        className=\"button button__main button__long\"\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nCharList.propTypes = {\n  onCharListLoaded: PropTypes.func,\n};\n\nexport { CharList };\n","import { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useMarvelService } from \"../../services/MarvelService\";\nimport { setContent } from \"../../utils/setContent\";\n\nimport \"./charInfo.scss\";\n\nconst CharInfo = (props) => {\n  const [char, setChar] = useState(null);\n\n  const { getCharacter, clearError, process, setProcess } =\n    useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n  }, []);\n\n  useEffect(() => {\n    updateChar();\n  }, [props.charId]);\n\n  const updateChar = () => {\n    clearError();\n    const { charId } = props;\n    if (!charId) {\n      return;\n    }\n\n    getCharacter(charId)\n      .then(onCharLoaded)\n      .then(() => {\n        setProcess(\"confirmed\");\n      });\n  };\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  return (\n    <div className=\"char__info\">\n      {setContent(process, View, char)}\n    </div>\n  );\n};\n\nconst View = ({ data }) => {\n  const { name, description, thumbnail, homePage, wiki, comics } = data;\n\n  let imgStyle = { objectFit: \"cover\" };\n  if (\n    thumbnail ===\n    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n  ) {\n    imgStyle = {\n      objectFit: \"contain\",\n    };\n  }\n\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img style={imgStyle} src={thumbnail} alt={name} />\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homePage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">{description}</div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {comics.length > 0 ? null : \"There is no comics with this character\"}\n        {comics.map((item, index) => {\n          if (index > 9) return;\n          return (\n            <li key={index} className=\"char__comics-item\">\n              {item.name}\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nCharInfo.propTypes = {\n  charId: PropTypes.number,\n};\n\nexport { CharInfo };\n","import { useState } from \"react\";\nimport {\n  Formik,\n  Form,\n  Field,\n  ErrorMessage as FormikErrorMessage,\n} from \"formik\";\nimport * as Yup from \"yup\";\nimport { Link } from \"react-router-dom\";\n\nimport { useMarvelService } from \"../../services/MarvelService\";\nimport { ErrorMessage } from \"../errorMessage/ErrorMessage\";\n\nimport \"./charSearchForm.scss\";\n\nconst CharSearchForm = () => {\n  const [char, setChar] = useState(null);\n  const { getCharacterByName, clearError, process, setProcess } =\n    useMarvelService();\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const updateChar = (name) => {\n    clearError();\n\n    getCharacterByName(name)\n      .then(onCharLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  const errorMessage =\n    process === \"error\" ? (\n      <div className=\"char__search-critical-error\">\n        <ErrorMessage />\n      </div>\n    ) : null;\n\n  const results = !char ? null : char.length > 0 ? (\n    <div className=\"char__search-wrapper\">\n      <div className=\"char__search-success\">\n        There is! Visit {char[0].name} page?\n      </div>\n      <Link\n        to={`/characters/${char[0].id}`}\n        className=\"button button__secondary\"\n      >\n        <div className=\"inner\">To page</div>\n      </Link>\n    </div>\n  ) : (\n    <div className=\"char__search-error\">\n      The character was not found. Check the name and try again\n    </div>\n  );\n\n  return (\n    <div className=\"char__search-form\">\n      <Formik\n        initialValues={{ charName: \"\" }}\n        validationSchema={Yup.object({\n          charName: Yup.string().required(\"This field is required\"),\n        })}\n        onSubmit={({ charName }) => {\n          updateChar(charName);\n        }}\n      >\n        <Form>\n          <label className=\"char__search-label\" htmlFor=\"charName\">\n            Or find a character by name:\n          </label>\n          <div className=\"char__search-wrapper\">\n            <Field\n              id=\"charName\"\n              name=\"charName\"\n              type=\"text\"\n              placeholder=\"Enter name\"\n            />\n            <button\n              type=\"submit\"\n              className=\"button button__main\"\n              disabled={process === \"loading\"}\n            >\n              <div className=\"inner\">find</div>\n            </button>\n          </div>\n          <FormikErrorMessage\n            component=\"div\"\n            className=\"char__search-error\"\n            name=\"charName\"\n          />\n        </Form>\n      </Formik>\n      {results}\n      {errorMessage}\n    </div>\n  );\n};\n\nexport { CharSearchForm };\n","import { Component } from \"react\";\nimport { ErrorMessage } from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n  state = {\n    error: false,\n  };\n\n  componentDidCatch(error, errorInfo) {\n    console.log(error, errorInfo);\n    this.setState({\n      error: true,\n    });\n  }\n\n  render() {\n    if (this.state.error) {\n      return <ErrorMessage />\n    }\n\n    return this.props.children;\n  }\n}\n\nexport { ErrorBoundary };\n","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { RandomChar } from \"../randomChar/RandomChar\";\nimport { CharList } from \"../charList/CharList\";\nimport { CharInfo } from \"../charInfo/CharInfo\";\nimport { CharSearchForm } from \"../charSearchForm/CharSearchForm\";\nimport { ErrorBoundary } from \"../errorBoundary/ErrorBoundary\";\n\nimport decoration from \"../../resources/img/vision.png\";\n\nconst MainPage = () => {\n  const [selectedChar, setSelectedChar] = useState(null);\n\n  const onCharSelected = (id) => {\n    setSelectedChar(id);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <meta name=\"description\" content=\"Marvel information portal\" />\n        <title>Marvel information</title>\n      </Helmet>\n      <ErrorBoundary>\n        <RandomChar />\n      </ErrorBoundary>\n      <div className=\"char__content\">\n        <ErrorBoundary>\n          <CharList onCharSelected={onCharSelected} />\n        </ErrorBoundary>\n        <div>\n          <ErrorBoundary>\n            <CharInfo charId={selectedChar} />\n          </ErrorBoundary>\n          <ErrorBoundary>\n            <CharSearchForm />\n          </ErrorBoundary>\n        </div>\n      </div>\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\n    </>\n  );\n};\n\nexport default MainPage;\n","export default __webpack_public_path__ + \"static/media/error.8c0adaec.gif\";","import img from \"./error.gif\";\n\nconst ErrorMessage = () => {\n  return (\n    <div>\n      <img\n        style={{\n          display: \"block\",\n          width: \"250px\",\n          height: \"250px\",\n          objectFit: \"contain\",\n          margin: \"0 auto\",\n        }}\n        src={img}\n        alt=\"Oopss... Error\"\n      />\n      <p\n        style={{\n          display: \"table\",\n          margin: \"0 auto\",\n          paddingBottom: \"15px\",\n          fontSize: \"20px\",\n          fontWeight: 'bold'\n        }}\n      >\n        Error..\n      </p>\n    </div>\n  );\n};\n\nexport { ErrorMessage };\n","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n  const { request, clearError, process, setProcess } = useHttp();\n\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\n  const _apiKey = \"apikey=38b070ade7dd3594f3f8ffe4805143a2\";\n  const _baseOffset = 210;\n\n  const getAllCharacters = async (offset = _baseOffset) => {\n    const res = await request(\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\n    );\n    return res.data.results.map(_transformCharacter);\n  };\n\n  const getCharacter = async (id) => {\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n    return _transformCharacter(res.data.results[0]);\n  };\n\n  const getCharacterByName = async (name) => {\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n    return res.data.results.map(_transformCharacter);\n  };\n\n  const getAllComics = async (offset = 0) => {\n    const res = await request(\n      `${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`\n    );\n    return res.data.results.map(_transformComics);\n  };\n\n  const getComics = async (id) => {\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n\n    return _transformComics(res.data.results[0]);\n  };\n\n  const _transformCharacter = (char) => {\n    return {\n      id: char.id,\n      name: char.name,\n      description: char.description\n        ? `${char.description.slice(0, 210)}...`\n        : `There is no description for this character 😢`,\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n      homePage: char.urls[0].url,\n      wiki: char.urls[1].url,\n      comics: char.comics.items,\n    };\n  };\n\n  const _transformComics = (comics) => {\n    return {\n      id: comics.id,\n      title: comics.title,\n      description: comics.description || \"There is no description\",\n      language: comics.textObjects.language || \"en-us\",\n      price:\n        comics.prices[0].price === 0\n          ? \"not available\"\n          : `${comics.prices[0].price}$`,\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n      comicsDetail: comics.urls[0].url,\n      pageCount: comics.pageCount\n        ? `${comics.pageCount} pages`\n        : \"No information about the number of pages\",\n    };\n  };\n\n  return {\n    process,\n    clearError,\n    getAllCharacters,\n    getCharacterByName,\n    getCharacter,\n    getAllComics,\n    getComics,\n    setProcess\n  };\n};\n\nexport { useMarvelService };\n","import { useState, useCallback } from \"react\";\n\nconst useHttp = () => {\n  const [process, setProcess] = useState(\"waiting\");\n\n  const request = useCallback(\n    async (\n      url,\n      method = \"GET\",\n      body = null,\n      headers = { \"Content-Type\": \"application/json\" }\n    ) => {\n      setProcess(\"loading\");\n\n      try {\n        const response = await fetch(url, { method, body, headers });\n\n        if (!response.ok) {\n          throw new Error(`Could no fetch ${url}, status: ${response.status}`);\n        }\n\n        const data = response.json();\n\n        return data;\n      } catch (e) {\n        setProcess(\"error\");\n        throw e;\n      }\n    },\n    []\n  );\n\n  const clearError = useCallback(() => {\n    setProcess(\"waiting\");\n  }, []);\n\n  return { request, clearError, process, setProcess };\n};\n\nexport { useHttp };\n","import \"./skeleton.scss\";\n\nconst Skeleton = () => {\n  return (\n    <>\n      <p className=\"char__select\">\n        Please select a character to see information\n      </p>\n      <div className=\"skeleton\">\n        <div className=\"pulse skeleton__header\">\n          <div className=\"pulse skeleton__circle\"></div>\n          <div className=\"pulse skeleton__mini\"></div>\n        </div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n      </div>\n    </>\n  );\n};\n\nexport {Skeleton};\n","import { Spinner } from \"../components/spinner/Spinner\";\nimport { Skeleton } from \"../components/skeleton/Skeleton\";\nimport { ErrorMessage } from \"../components/errorMessage/ErrorMessage\";\n\nconst setContent = (process, Component, data) => {\n  switch (process) {\n    case \"waiting\":\n      return <Skeleton />;\n    case \"loading\":\n      return <Spinner />;\n    case \"confirmed\":\n      return <Component data={data} />;\n    case \"error\":\n      return <ErrorMessage />;\n    default:\n      throw new Error(\"Unexpected process\");\n  }\n};\n\nexport { setContent };\n"],"sourceRoot":""}